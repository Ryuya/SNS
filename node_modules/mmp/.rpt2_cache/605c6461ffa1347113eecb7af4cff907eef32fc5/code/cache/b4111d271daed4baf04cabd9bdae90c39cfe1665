{"code":"import * as d3 from \"d3\";\r\nimport Utils from \"../../utils/utils\";\r\n/**\r\n * Draw the map and update it.\r\n */\r\nvar Draw = /** @class */ (function () {\r\n    /**\r\n     * Get the associated map instance.\r\n     * @param {Map} map\r\n     */\r\n    function Draw(map) {\r\n        this.map = map;\r\n    }\r\n    /**\r\n     * Create svg and main css map properties.\r\n     */\r\n    Draw.prototype.create = function () {\r\n        var _this = this;\r\n        this.map.dom.container = d3.select(\"#\" + this.map.id)\r\n            .style(\"position\", \"relative\");\r\n        this.map.dom.svg = this.map.dom.container.append(\"svg\")\r\n            .style(\"position\", \"absolute\")\r\n            .style(\"width\", \"100%\")\r\n            .style(\"height\", \"100%\")\r\n            .style(\"top\", 0)\r\n            .style(\"left\", 0);\r\n        this.map.dom.svg.append(\"rect\")\r\n            .attr(\"width\", \"100%\")\r\n            .attr(\"height\", \"100%\")\r\n            .attr(\"fill\", \"white\")\r\n            .attr(\"pointer-events\", \"all\")\r\n            .on(\"click\", function () {\r\n            // Deselect the selected node when click on the map background\r\n            _this.map.nodes.deselectNode();\r\n        });\r\n        this.map.dom.g = this.map.dom.svg.append(\"g\");\r\n    };\r\n    /**\r\n     * Update the dom of the map with the (new) nodes.\r\n     */\r\n    Draw.prototype.update = function () {\r\n        var _this = this;\r\n        var nodes = this.map.nodes.getNodes(), dom = {\r\n            nodes: this.map.dom.g.selectAll(\".\" + this.map.id + \"_node\").data(nodes),\r\n            branches: this.map.dom.g.selectAll(\".\" + this.map.id + \"_branch\").data(nodes.slice(1))\r\n        };\r\n        var tapedTwice = false;\r\n        var outer = dom.nodes.enter().append(\"g\")\r\n            .style(\"cursor\", \"pointer\")\r\n            .attr(\"class\", this.map.id + \"_node\")\r\n            .attr(\"id\", function (node) {\r\n            node.dom = this;\r\n            return node.id;\r\n        })\r\n            .attr(\"transform\", function (node) { return \"translate(\" + node.coordinates.x + \",\" + node.coordinates.y + \")\"; })\r\n            .on(\"dblclick\", function (node) {\r\n            d3.event.stopPropagation();\r\n            _this.enableNodeNameEditing(node);\r\n        }).on('touchstart', function (node) {\r\n            if (!tapedTwice) {\r\n                tapedTwice = true;\r\n                setTimeout(function () {\r\n                    tapedTwice = false;\r\n                }, 300);\r\n                return false;\r\n            }\r\n            _this.enableNodeNameEditing(node);\r\n        });\r\n        if (this.map.options.drag === true) {\r\n            outer.call(this.map.drag.getDragBehavior());\r\n        }\r\n        else {\r\n            outer.on(\"mousedown\", function (node) {\r\n                _this.map.nodes.selectNode(node.id);\r\n            });\r\n        }\r\n        // Set text of the node\r\n        outer.insert(\"foreignObject\")\r\n            .html(function (node) { return _this.createNodeNameDOM(node); })\r\n            .each(function (node) {\r\n            _this.updateNodeNameContainer(node);\r\n        });\r\n        // Set background of the node\r\n        outer.insert(\"path\", \"foreignObject\")\r\n            .style(\"fill\", function (node) { return node.colors.background; })\r\n            .style(\"stroke-width\", 3)\r\n            .attr(\"d\", function (node) { return _this.drawNodeBackground(node); });\r\n        // Set image of the node\r\n        outer.each(function (node) {\r\n            _this.setImage(node);\r\n        });\r\n        dom.branches.enter().insert(\"path\", \"g\")\r\n            .style(\"fill\", function (node) { return node.colors.branch; })\r\n            .style(\"stroke\", function (node) { return node.colors.branch; })\r\n            .attr(\"class\", this.map.id + \"_branch\")\r\n            .attr(\"id\", function (node) { return node.id + \"_branch\"; })\r\n            .attr(\"d\", function (node) { return _this.drawBranch(node); });\r\n        dom.nodes.exit().remove();\r\n        dom.branches.exit().remove();\r\n    };\r\n    /**\r\n     * Remove all nodes and branches of the map.\r\n     */\r\n    Draw.prototype.clear = function () {\r\n        d3.selectAll(\".\" + this.map.id + \"_node, .\" + this.map.id + \"_branch\").remove();\r\n    };\r\n    /**\r\n     * Draw the background shape of the node.\r\n     * @param {Node} node\r\n     * @returns {Path} path\r\n     */\r\n    Draw.prototype.drawNodeBackground = function (node) {\r\n        var name = node.getNameDOM(), path = d3.path();\r\n        node.dimensions.width = name.clientWidth + 45;\r\n        node.dimensions.height = name.clientHeight + 30;\r\n        var x = node.dimensions.width / 2, y = node.dimensions.height / 2, k = node.k;\r\n        path.moveTo(-x, k / 3);\r\n        path.bezierCurveTo(-x, -y + 10, -x + 10, -y, k, -y);\r\n        path.bezierCurveTo(x - 10, -y, x, -y + 10, x, k / 3);\r\n        path.bezierCurveTo(x, y - 10, x - 10, y, k, y);\r\n        path.bezierCurveTo(-x + 10, y, -x, y - 10, -x, k / 3);\r\n        path.closePath();\r\n        return path;\r\n    };\r\n    /**\r\n     * Draw the branch of the node.\r\n     * @param {Node} node\r\n     * @returns {Path} path\r\n     */\r\n    Draw.prototype.drawBranch = function (node) {\r\n        var parent = node.parent, path = d3.path(), level = node.getLevel(), width = 22 - (level < 6 ? level : 6) * 3, mx = (parent.coordinates.x + node.coordinates.x) / 2, ory = parent.coordinates.y < node.coordinates.y + node.dimensions.height / 2 ? -1 : 1, orx = parent.coordinates.x > node.coordinates.x ? -1 : 1, inv = orx * ory;\r\n        path.moveTo(parent.coordinates.x, parent.coordinates.y - width * .8);\r\n        path.bezierCurveTo(mx - width * inv, parent.coordinates.y - width / 2, parent.coordinates.x - width / 2 * inv, node.coordinates.y + node.dimensions.height / 2 - width / 3, node.coordinates.x - node.dimensions.width / 3 * orx, node.coordinates.y + node.dimensions.height / 2 + 3);\r\n        path.bezierCurveTo(parent.coordinates.x + width / 2 * inv, node.coordinates.y + node.dimensions.height / 2 + width / 3, mx + width * inv, parent.coordinates.y + width / 2, parent.coordinates.x, parent.coordinates.y + width * .8);\r\n        path.closePath();\r\n        return path;\r\n    };\r\n    /**\r\n     * Update the node HTML elements.\r\n     * @param {Node} node\r\n     */\r\n    Draw.prototype.updateNodeShapes = function (node) {\r\n        var _this = this;\r\n        var background = node.getBackgroundDOM();\r\n        d3.select(background).attr(\"d\", function (node) { return _this.drawNodeBackground(node); });\r\n        d3.selectAll(\".\" + this.map.id + \"_branch\").attr(\"d\", function (node) { return _this.drawBranch(node); });\r\n        this.updateImagePosition(node);\r\n        this.updateNodeNameContainer(node);\r\n    };\r\n    /**\r\n     * Set main properties of node image and create it if it does not exist.\r\n     * @param {Node} node\r\n     */\r\n    Draw.prototype.setImage = function (node) {\r\n        var domImage = node.getImageDOM();\r\n        if (!domImage) {\r\n            domImage = document.createElementNS(\"http://www.w3.org/2000/svg\", \"image\");\r\n            node.dom.appendChild(domImage);\r\n        }\r\n        if (node.image.src !== \"\") {\r\n            var image = new Image();\r\n            image.src = node.image.src;\r\n            image.onload = function () {\r\n                var h = node.image.size, w = this.width * h / this.height, y = -(h + node.dimensions.height / 2 + 5), x = -w / 2;\r\n                domImage.setAttribute(\"href\", node.image.src);\r\n                domImage.setAttribute(\"height\", h.toString());\r\n                domImage.setAttribute(\"width\", w.toString());\r\n                domImage.setAttribute(\"y\", y.toString());\r\n                domImage.setAttribute(\"x\", x.toString());\r\n            };\r\n            image.onerror = function () {\r\n                domImage.remove();\r\n                node.image.src = \"\";\r\n            };\r\n        }\r\n        else {\r\n            domImage.remove();\r\n        }\r\n    };\r\n    /**\r\n     * Update the node image position.\r\n     * @param {Node} node\r\n     */\r\n    Draw.prototype.updateImagePosition = function (node) {\r\n        if (node.image.src !== \"\") {\r\n            var image = node.getImageDOM(), y = -(image.getBBox().height + node.dimensions.height / 2 + 5);\r\n            image.setAttribute(\"y\", y.toString());\r\n        }\r\n    };\r\n    /**\r\n     * Enable and manage all events for the name editing.\r\n     * @param {Node} node\r\n     */\r\n    Draw.prototype.enableNodeNameEditing = function (node) {\r\n        var _this = this;\r\n        var name = node.getNameDOM();\r\n        Utils.focusWithCaretAtEnd(name);\r\n        name.style.setProperty(\"cursor\", \"auto\");\r\n        name.ondblclick = name.onmousedown = function (event) {\r\n            event.stopPropagation();\r\n        };\r\n        name.oninput = function () {\r\n            _this.updateNodeShapes(node);\r\n        };\r\n        // Allow only some shortcuts.\r\n        name.onkeydown = function (event) {\r\n            // Unfocus the node.\r\n            if (event.code === 'Escape') {\r\n                Utils.removeAllRanges();\r\n                name.blur();\r\n            }\r\n            if (event.ctrlKey || event.metaKey) {\r\n                switch (event.code) {\r\n                    case 'KeyA':\r\n                    case 'KeyC':\r\n                    case 'KeyV':\r\n                    case 'KeyX':\r\n                    case 'KeyZ':\r\n                    case 'ArrowLeft':\r\n                    case 'ArrowRight':\r\n                    case 'ArrowUp':\r\n                    case 'ArrowDown':\r\n                    case 'Backspace':\r\n                    case 'Delete':\r\n                        return true;\r\n                    default:\r\n                        return false;\r\n                }\r\n            }\r\n            switch (event.code) {\r\n                case 'Tab':\r\n                    return false;\r\n                default:\r\n                    return true;\r\n            }\r\n        };\r\n        // Remove html formatting when paste text on node\r\n        name.onpaste = function (event) {\r\n            event.preventDefault();\r\n            var text = event.clipboardData.getData(\"text/plain\");\r\n            document.execCommand(\"insertHTML\", false, text);\r\n        };\r\n        name.onblur = function () {\r\n            if (name.innerHTML !== node.name) {\r\n                _this.map.nodes.updateNode(\"name\", name.innerHTML);\r\n            }\r\n            name.ondblclick = name.onmousedown = name.onblur =\r\n                name.onkeydown = name.oninput = name.onpaste = null;\r\n            name.style.setProperty(\"cursor\", \"pointer\");\r\n            name.blur();\r\n        };\r\n    };\r\n    /**\r\n     * Update node name container (foreign object) dimensions.\r\n     * @param {Node} node\r\n     */\r\n    Draw.prototype.updateNodeNameContainer = function (node) {\r\n        var name = node.getNameDOM(), foreignObject = name.parentNode;\r\n        foreignObject.setAttribute(\"x\", (-name.clientWidth / 2).toString());\r\n        foreignObject.setAttribute(\"y\", (-name.clientHeight / 2).toString());\r\n        foreignObject.setAttribute(\"width\", name.clientWidth.toString());\r\n        foreignObject.setAttribute(\"height\", name.clientHeight.toString());\r\n    };\r\n    /**\r\n     * Create a string with HTML of the node name div.\r\n     * @param {Node} node\r\n     * @returns {string} html\r\n     */\r\n    Draw.prototype.createNodeNameDOM = function (node) {\r\n        var div = document.createElement(\"div\");\r\n        div.style.setProperty(\"font-size\", node.font.size.toString() + \"px\");\r\n        div.style.setProperty(\"color\", node.colors.name);\r\n        div.style.setProperty(\"font-style\", node.font.style);\r\n        div.style.setProperty(\"font-weight\", node.font.weight);\r\n        div.style.setProperty(\"text-decoration\", node.font.decoration);\r\n        div.style.setProperty(\"display\", \"inline-block\");\r\n        div.style.setProperty(\"white-space\", \"pre\");\r\n        div.style.setProperty(\"font-family\", this.map.options.fontFamily);\r\n        div.style.setProperty(\"text-align\", \"center\");\r\n        div.setAttribute(\"contenteditable\", \"true\");\r\n        div.setAttribute(\"spellcheck\", \"false\");\r\n        div.innerHTML = node.name;\r\n        return div.outerHTML;\r\n    };\r\n    return Draw;\r\n}());\r\nexport default Draw;\r\n"}
