{"code":"import * as d3 from \"d3\";\r\nimport { Event } from \"./events\";\r\nimport Log from \"../../utils/log\";\r\n/**\r\n * Manage the zoom events of the map.\r\n */\r\nvar Zoom = /** @class */ (function () {\r\n    /**\r\n     * Get the associated map instance and initialize the d3 zoom behavior.\r\n     * @param {Map} map\r\n     */\r\n    function Zoom(map) {\r\n        var _this = this;\r\n        /**\r\n         * Zoom in the map.\r\n         * @param {number} duration\r\n         */\r\n        this.zoomIn = function (duration) {\r\n            if (duration && typeof duration !== \"number\") {\r\n                Log.error(\"The parameter must be a number\", \"type\");\r\n            }\r\n            _this.move(true, duration);\r\n            _this.map.events.call(Event.zoomIn);\r\n        };\r\n        /**\r\n         * Zoom out the map.\r\n         * @param {number} duration\r\n         */\r\n        this.zoomOut = function (duration) {\r\n            if (duration && typeof duration !== \"number\") {\r\n                Log.error(\"The parameter must be a number\", \"type\");\r\n            }\r\n            _this.move(false, duration);\r\n            _this.map.events.call(Event.zoomOut);\r\n        };\r\n        /**\r\n         * Center the root node in the mind map.\r\n         * @param {number} duration\r\n         * @param {number} type\r\n         */\r\n        this.center = function (type, duration) {\r\n            if (duration === void 0) { duration = 500; }\r\n            if (type && type !== \"zoom\" && type !== \"position\") {\r\n                Log.error(\"The type must be a string (\\\"zoom\\\" or \\\"position\\\")\", \"type\");\r\n            }\r\n            if (duration && typeof duration !== \"number\") {\r\n                Log.error(\"The duration must be a number\", \"type\");\r\n            }\r\n            var root = _this.map.nodes.getRoot(), w = _this.map.dom.container.node().clientWidth, h = _this.map.dom.container.node().clientHeight, x = w / 2 - root.coordinates.x, y = h / 2 - root.coordinates.y, svg = _this.map.dom.svg.transition().duration(duration);\r\n            switch (type) {\r\n                case \"zoom\":\r\n                    _this.zoomBehavior.scaleTo(svg, 1);\r\n                    break;\r\n                case \"position\":\r\n                    _this.zoomBehavior.translateTo(svg, w / 2 - x, h / 2 - y);\r\n                    break;\r\n                default:\r\n                    _this.zoomBehavior.transform(svg, d3.zoomIdentity.translate(x, y));\r\n            }\r\n            _this.map.events.call(Event.center);\r\n        };\r\n        this.map = map;\r\n        this.zoomBehavior = d3.zoom().scaleExtent([0.5, 2]).on(\"zoom\", function () {\r\n            _this.map.dom.g.attr(\"transform\", d3.event.transform);\r\n        });\r\n    }\r\n    /**\r\n     * Return the d3 zoom behavior.\r\n     * @returns {ZoomBehavior} zoom\r\n     */\r\n    Zoom.prototype.getZoomBehavior = function () {\r\n        return this.zoomBehavior;\r\n    };\r\n    /**\r\n     * Move the zoom in a direction (true: in, false: out).\r\n     * @param {boolean} direction\r\n     * @param {number} duration\r\n     */\r\n    Zoom.prototype.move = function (direction, duration) {\r\n        if (duration === void 0) { duration = 50; }\r\n        var svg = this.map.dom.svg.transition().duration(duration);\r\n        this.zoomBehavior.scaleBy(svg, direction ? 4 / 3 : 3 / 4);\r\n    };\r\n    return Zoom;\r\n}());\r\nexport default Zoom;\r\n"}
