{"code":"import Utils from \"../utils/utils\";\r\nimport * as d3 from \"d3\";\r\nimport Log from \"../utils/log\";\r\n/**\r\n * Manage default map options.\r\n */\r\nvar Options = /** @class */ (function () {\r\n    /**\r\n     * Initialize all options.\r\n     * @param {OptionParameters} parameters\r\n     * @param {Map} map\r\n     */\r\n    function Options(parameters, map) {\r\n        if (parameters === void 0) { parameters = {}; }\r\n        var _this = this;\r\n        this.update = function (property, value) {\r\n            if (typeof property !== \"string\") {\r\n                Log.error(\"The property must be a string\", \"type\");\r\n            }\r\n            switch (property) {\r\n                case \"fontFamily\":\r\n                    _this.updateFontFamily(value);\r\n                    break;\r\n                case \"centerOnResize\":\r\n                    _this.updateCenterOnResize(value);\r\n                    break;\r\n                case \"drag\":\r\n                    _this.updateDrag(value);\r\n                    break;\r\n                case \"zoom\":\r\n                    _this.updateZoom(value);\r\n                    break;\r\n                case \"defaultNode\":\r\n                    _this.updateDefaultNode(value);\r\n                    break;\r\n                case \"rootNode\":\r\n                    _this.updateDefaultRootNode(value);\r\n                    break;\r\n                default:\r\n                    Log.error(\"The property does not exist\");\r\n            }\r\n        };\r\n        this.map = map;\r\n        this.fontFamily = parameters.fontFamily || \"Arial, Helvetica, sans-serif\";\r\n        this.centerOnResize = parameters.centerOnResize !== undefined ? parameters.centerOnResize : true;\r\n        this.drag = parameters.drag !== undefined ? parameters.drag : true;\r\n        this.zoom = parameters.zoom !== undefined ? parameters.zoom : true;\r\n        // Default node properties\r\n        this.defaultNode = Utils.mergeObjects({\r\n            name: \"Node\",\r\n            image: {\r\n                src: \"\",\r\n                size: 60\r\n            },\r\n            colors: {\r\n                name: \"#787878\",\r\n                background: \"#f9f9f9\",\r\n                branch: \"#577a96\"\r\n            },\r\n            font: {\r\n                size: 16,\r\n                style: \"normal\",\r\n                weight: \"normal\"\r\n            },\r\n            locked: true\r\n        }, parameters.defaultNode, true);\r\n        // Default root node properties\r\n        this.rootNode = Utils.mergeObjects({\r\n            name: \"Root node\",\r\n            image: {\r\n                src: \"\",\r\n                size: 70\r\n            },\r\n            colors: {\r\n                name: \"#787878\",\r\n                background: \"#f0f6f5\",\r\n                branch: \"\"\r\n            },\r\n            font: {\r\n                size: 20,\r\n                style: \"normal\",\r\n                weight: \"normal\"\r\n            }\r\n        }, parameters.rootNode, true);\r\n    }\r\n    /**\r\n     * Update the font family of all nodes.\r\n     * @param {string} font\r\n     */\r\n    Options.prototype.updateFontFamily = function (font) {\r\n        if (typeof font !== \"string\") {\r\n            Log.error(\"The font must be a string\", \"type\");\r\n        }\r\n        this.fontFamily = font;\r\n        this.map.draw.update();\r\n    };\r\n    /**\r\n     * Update centerOnResize behavior.\r\n     * @param {boolean} flag\r\n     */\r\n    Options.prototype.updateCenterOnResize = function (flag) {\r\n        var _this = this;\r\n        if (typeof flag !== \"boolean\") {\r\n            Log.error(\"The value must be a boolean\", \"type\");\r\n        }\r\n        this.centerOnResize = flag;\r\n        if (this.centerOnResize === true) {\r\n            d3.select(window).on(\"resize.\" + this.map.id, function () {\r\n                _this.map.zoom.center();\r\n            });\r\n        }\r\n        else {\r\n            d3.select(window).on(\"resize.\" + this.map.id, null);\r\n        }\r\n    };\r\n    /**\r\n     * Update drag behavior.\r\n     * @param {boolean} flag\r\n     */\r\n    Options.prototype.updateDrag = function (flag) {\r\n        if (typeof flag !== \"boolean\") {\r\n            Log.error(\"The value must be a boolean\", \"type\");\r\n        }\r\n        this.drag = flag;\r\n        this.map.draw.clear();\r\n        this.map.draw.update();\r\n    };\r\n    /**\r\n     * Update zoom behavior.\r\n     * @param {boolean} flag\r\n     */\r\n    Options.prototype.updateZoom = function (flag) {\r\n        if (typeof flag !== \"boolean\") {\r\n            Log.error(\"The value must be a boolean\", \"type\");\r\n        }\r\n        this.zoom = flag;\r\n        if (this.zoom === true) {\r\n            this.map.dom.svg.call(this.map.zoom.getZoomBehavior());\r\n        }\r\n        else {\r\n            this.map.dom.svg.on(\".zoom\", null);\r\n        }\r\n    };\r\n    /**\r\n     * Update default node properties.\r\n     * @param {DefaultNodeProperties} properties\r\n     */\r\n    Options.prototype.updateDefaultNode = function (properties) {\r\n        this.defaultNode = Utils.mergeObjects(this.defaultNode, properties, true);\r\n    };\r\n    /**\r\n     * Update default root node properties.\r\n     * @param {DefaultNodeProperties} properties\r\n     */\r\n    Options.prototype.updateDefaultRootNode = function (properties) {\r\n        this.rootNode = Utils.mergeObjects(this.rootNode, properties, true);\r\n    };\r\n    return Options;\r\n}());\r\nexport default Options;\r\n"}
