{"code":"import Log from \"../../utils/log\";\r\nimport Utils from \"../../utils/utils\";\r\n/**\r\n * Manage the drag events of the nodes.\r\n */\r\nvar CopyPaste = /** @class */ (function () {\r\n    /**\r\n     * Get the associated map instance.\r\n     * @param {Map} map\r\n     */\r\n    function CopyPaste(map) {\r\n        var _this = this;\r\n        /**\r\n         * Copy the node with the id passed as parameter or\r\n         * the selected node in the mmp clipboard.\r\n         * @param {string} id\r\n         */\r\n        this.copy = function (id) {\r\n            if (id && typeof id !== \"string\") {\r\n                Log.error(\"The node id must be a string\", \"type\");\r\n            }\r\n            var node = id ? _this.map.nodes.getNode(id) : _this.map.nodes.getSelectedNode();\r\n            if (node === undefined) {\r\n                Log.error(\"There are no nodes with id \\\"\" + id + \"\\\"\");\r\n            }\r\n            if (!node.isRoot()) {\r\n                _this.copiedNodes = [_this.map.nodes.getNodeProperties(node, false)];\r\n                _this.map.nodes.getDescendants(node).forEach(function (node) {\r\n                    _this.copiedNodes.push(_this.map.nodes.getNodeProperties(node, false));\r\n                });\r\n            }\r\n            else {\r\n                Log.error(\"The root node can not be copied\");\r\n            }\r\n        };\r\n        /**\r\n         * Remove and copy the node with the id passed as parameter or\r\n         * the selected node in the mmp clipboard.\r\n         * @param {string} id\r\n         */\r\n        this.cut = function (id) {\r\n            if (id && typeof id !== \"string\") {\r\n                Log.error(\"The node id must be a string\", \"type\");\r\n            }\r\n            var node = id ? _this.map.nodes.getNode(id) : _this.map.nodes.getSelectedNode();\r\n            if (node === undefined) {\r\n                Log.error(\"There are no nodes with id \\\"\" + id + \"\\\"\");\r\n            }\r\n            if (!node.isRoot()) {\r\n                _this.copiedNodes = [_this.map.nodes.getNodeProperties(node, false)];\r\n                _this.map.nodes.getDescendants(node).forEach(function (node) {\r\n                    _this.copiedNodes.push(_this.map.nodes.getNodeProperties(node, false));\r\n                });\r\n                _this.map.nodes.removeNode(node.id);\r\n            }\r\n            else {\r\n                Log.error(\"The root node can not be cut\");\r\n            }\r\n        };\r\n        /**\r\n         * If there are nodes in the mmp clipboard paste them in the map as children\r\n         * of the node with the passed as parameter or of the selected node.\r\n         * @param {string} id\r\n         */\r\n        this.paste = function (id) {\r\n            if (_this.copiedNodes === undefined) {\r\n                Log.error(\"There are not nodes in the mmp clipboard\");\r\n            }\r\n            if (id && typeof id !== \"string\") {\r\n                Log.error(\"The node id must be a string\", \"type\");\r\n            }\r\n            var node = id ? _this.map.nodes.getNode(id) : _this.map.nodes.getSelectedNode();\r\n            if (node === undefined) {\r\n                Log.error(\"There are no nodes with id \\\"\" + id + \"\\\"\");\r\n            }\r\n            var rootNode = _this.map.nodes.getRoot();\r\n            var addNodes = function (nodeProperties, newParentNode) {\r\n                var coordinates;\r\n                if (nodeProperties.id !== _this.copiedNodes[0].id) {\r\n                    coordinates = { x: 0, y: 0 };\r\n                    var oldParentNode = _this.copiedNodes.find(function (np) {\r\n                        return np.id === nodeProperties.parent;\r\n                    });\r\n                    var dx = oldParentNode.coordinates.x - nodeProperties.coordinates.x;\r\n                    var dy = oldParentNode.coordinates.y - nodeProperties.coordinates.y;\r\n                    var newParentOrientation = _this.map.nodes.getOrientation(newParentNode);\r\n                    var oldParentOrientation = oldParentNode.coordinates.x < rootNode.coordinates.x;\r\n                    if (oldParentOrientation !== newParentOrientation) {\r\n                        dx = -dx;\r\n                    }\r\n                    coordinates.x = newParentNode.coordinates.x - dx;\r\n                    coordinates.y = newParentNode.coordinates.y - dy;\r\n                    coordinates = _this.map.nodes.fixCoordinates(coordinates, true);\r\n                }\r\n                var nodePropertiesCopy = Utils.cloneObject(nodeProperties);\r\n                _this.map.nodes.addNode({\r\n                    name: nodePropertiesCopy.name,\r\n                    coordinates: coordinates,\r\n                    image: nodePropertiesCopy.image,\r\n                    colors: nodePropertiesCopy.colors,\r\n                    font: nodePropertiesCopy.font,\r\n                    locked: nodePropertiesCopy.locked\r\n                }, newParentNode.id);\r\n                var children = _this.copiedNodes.filter(function (np) {\r\n                    return np.parent === nodeProperties.id;\r\n                });\r\n                // If there are children add them.\r\n                if (children.length > 0) {\r\n                    var nodes = _this.map.nodes.getNodes();\r\n                    newParentNode = nodes[nodes.length - 1];\r\n                    children.forEach(function (np) {\r\n                        addNodes(np, newParentNode);\r\n                    });\r\n                }\r\n            };\r\n            addNodes(_this.copiedNodes[0], node);\r\n        };\r\n        this.map = map;\r\n    }\r\n    return CopyPaste;\r\n}());\r\nexport default CopyPaste;\r\n"}
