{"code":"import Log from \"./log\";\r\n/**\r\n * A list of general useful functions.\r\n */\r\nvar Utils = /** @class */ (function () {\r\n    function Utils() {\r\n    }\r\n    /**\r\n     * Clone an object in depth.\r\n     * @param {object} object\r\n     * @returns object\r\n     */\r\n    Utils.cloneObject = function (object) {\r\n        if (object === null) {\r\n            return null;\r\n        }\r\n        else if (typeof object === \"object\") {\r\n            return JSON.parse(JSON.stringify(object));\r\n        }\r\n        else {\r\n            Log.error(\"Impossible to clone a non-object\", \"type\");\r\n        }\r\n    };\r\n    /**\r\n     * Clear an object.\r\n     * @param {object} object\r\n     */\r\n    Utils.clearObject = function (object) {\r\n        for (var property in object) {\r\n            delete object[property];\r\n        }\r\n    };\r\n    /**\r\n     * Convert an Object to an array.\r\n     * @param {object} object\r\n     * @returns {Array}\r\n     */\r\n    Utils.fromObjectToArray = function (object) {\r\n        var array = [];\r\n        for (var p in object) {\r\n            array.push(object[p]);\r\n        }\r\n        return array;\r\n    };\r\n    /**\r\n     * Merge two objects.\r\n     * @param {object} object1\r\n     * @param {object} object2\r\n     * @param {boolean} restricted\r\n     * @returns {object} result\r\n     */\r\n    Utils.mergeObjects = function (object1, object2, restricted) {\r\n        if (restricted === void 0) { restricted = false; }\r\n        if (object2 === undefined && this.isPureObjectType(object1)) {\r\n            return this.cloneObject(object1);\r\n        }\r\n        else if (object1 === undefined && this.isPureObjectType(object2)) {\r\n            return this.cloneObject(object2);\r\n        }\r\n        else if (!this.isPureObjectType(object1) || !this.isPureObjectType(object2)) {\r\n            Log.error(\"Only two pure objects can be merged\", \"type\");\r\n        }\r\n        var result = this.cloneObject(object1);\r\n        for (var property in object2) {\r\n            var value = object2[property];\r\n            if (!restricted || result[property] !== undefined) {\r\n                if (this.isPrimitiveType(value) || value === null) {\r\n                    result[property] = value;\r\n                }\r\n                else if (Array.isArray(value)) {\r\n                    result[property] = Utils.cloneObject(value);\r\n                }\r\n                else if (this.isPureObjectType(value)) {\r\n                    if (this.isPureObjectType(result[property])) {\r\n                        result[property] = Utils.mergeObjects(result[property], value);\r\n                    }\r\n                    else {\r\n                        result[property] = Utils.cloneObject(value);\r\n                    }\r\n                }\r\n                else {\r\n                    Log.error(\"Type \\\"\" + typeof value + \"\\\" not allowed here\", \"type\");\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    };\r\n    /**\r\n     * Return css rules of an element.\r\n     * @param {HTMLElement} element\r\n     * @return {string} css\r\n     */\r\n    Utils.cssRules = function (element) {\r\n        var css = \"\", sheets = document.styleSheets;\r\n        for (var i = 0; i < sheets.length; i++) {\r\n            var rules = sheets[i].cssRules;\r\n            if (rules) {\r\n                for (var j = 0; j < rules.length; j++) {\r\n                    var rule = rules[j], fontFace = rule.cssText.match(/^@font-face/);\r\n                    if (element.querySelector(rule.selectorText) || fontFace) {\r\n                        css += rule.cssText;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return css;\r\n    };\r\n    /**\r\n     * Return true if the value is a primitive type.\r\n     * @param value\r\n     * @returns {boolean}\r\n     */\r\n    Utils.isPrimitiveType = function (value) {\r\n        return typeof value === \"string\" ||\r\n            typeof value === \"number\" ||\r\n            typeof value === \"boolean\" ||\r\n            typeof value === \"undefined\";\r\n    };\r\n    /**\r\n     * Return true if the value is a pure object.\r\n     * @param value\r\n     * @returns {boolean}\r\n     */\r\n    Utils.isPureObjectType = function (value) {\r\n        return typeof value === \"object\" && !Array.isArray(value) && value !== null;\r\n    };\r\n    /**\r\n     * Remove all ranges of window.\r\n     */\r\n    Utils.removeAllRanges = function () {\r\n        window.getSelection().removeAllRanges();\r\n    };\r\n    /**\r\n     * Focus an element putting the cursor in the end.\r\n     * @param {HTMLElement} element\r\n     */\r\n    Utils.focusWithCaretAtEnd = function (element) {\r\n        var range = document.createRange(), sel = window.getSelection();\r\n        element.focus();\r\n        range.selectNodeContents(element);\r\n        range.collapse(false);\r\n        sel.removeAllRanges();\r\n        sel.addRange(range);\r\n    };\r\n    return Utils;\r\n}());\r\nexport default Utils;\r\n"}
