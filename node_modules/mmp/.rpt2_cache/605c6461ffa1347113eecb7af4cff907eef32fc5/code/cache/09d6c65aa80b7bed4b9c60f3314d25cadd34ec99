{"code":"import Log from \"../../utils/log\";\r\nimport Utils from \"../../utils/utils\";\r\nimport { Event } from \"./events\";\r\n/**\r\n * Manage map image exports.\r\n */\r\nvar Export = /** @class */ (function () {\r\n    /**\r\n     * Get the associated map instance.\r\n     * @param {Map} map\r\n     */\r\n    function Export(map) {\r\n        var _this = this;\r\n        /**\r\n         * Return the snapshot (json) of the current map.\r\n         * @returns {MapSnapshot} json\r\n         */\r\n        this.asJSON = function () {\r\n            var snapshot = _this.map.history.current();\r\n            _this.map.events.call(Event.exportJSON);\r\n            return Utils.cloneObject(snapshot);\r\n        };\r\n        /**\r\n         * Return the image data URI in the callback function.\r\n         * @param {Function} callback\r\n         * @param {string} type\r\n         */\r\n        this.asImage = function (callback, type) {\r\n            if (typeof callback !== \"function\") {\r\n                Log.error(\"The first parameter must be a function\", \"type\");\r\n            }\r\n            if (type && typeof type !== \"string\") {\r\n                Log.error(\"The second optional parameter must be a string\", \"type\");\r\n            }\r\n            _this.map.nodes.deselectNode();\r\n            _this.dataURI(function (url) {\r\n                var image = new Image();\r\n                image.src = url;\r\n                image.onload = function () {\r\n                    var canvas = document.createElement(\"canvas\"), context = canvas.getContext(\"2d\");\r\n                    canvas.width = image.width;\r\n                    canvas.height = image.height;\r\n                    context.drawImage(image, 0, 0);\r\n                    context.globalCompositeOperation = \"destination-over\";\r\n                    context.fillStyle = \"#ffffff\";\r\n                    context.fillRect(0, 0, canvas.width, canvas.height);\r\n                    if (typeof type === \"string\") {\r\n                        type = \"image/\" + type;\r\n                    }\r\n                    callback(canvas.toDataURL(type));\r\n                    _this.map.events.call(Event.exportImage);\r\n                };\r\n                image.onerror = function () {\r\n                    Log.error(\"The image has not been loaded correctly\");\r\n                };\r\n            });\r\n        };\r\n        this.map = map;\r\n    }\r\n    /**\r\n     * Convert the mind map svg in the data URI.\r\n     * @param {Function} callback\r\n     */\r\n    Export.prototype.dataURI = function (callback) {\r\n        var element = this.map.dom.g.node(), clone = element.cloneNode(true), svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\"), box = element.getBBox(), css = Utils.cssRules(element), xmlns = \"http://www.w3.org/2000/xmlns/\", padding = 15, x = box.x - padding, y = box.y - padding, w = box.width + padding * 2, h = box.height + padding * 2;\r\n        svg.setAttributeNS(xmlns, \"xmlns\", \"http://www.w3.org/2000/svg\");\r\n        svg.setAttributeNS(xmlns, \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\r\n        svg.setAttribute(\"version\", \"1.1\");\r\n        svg.setAttribute(\"width\", w);\r\n        svg.setAttribute(\"height\", h);\r\n        svg.setAttribute(\"viewBox\", [x, y, w, h].join(\" \"));\r\n        // If there is css, insert it\r\n        if (css !== \"\") {\r\n            var style = document.createElement(\"style\"), defs = document.createElement(\"defs\");\r\n            style.setAttribute(\"type\", \"text/css\");\r\n            style.innerHTML = \"<![CDATA[\\n\" + css + \"\\n]]>\";\r\n            defs.appendChild(style);\r\n            svg.appendChild(defs);\r\n        }\r\n        clone.setAttribute(\"transform\", \"translate(0,0)\");\r\n        svg.appendChild(clone);\r\n        this.convertImages(clone, function () {\r\n            var xmls = new XMLSerializer(), reader = new FileReader();\r\n            var blob = new Blob([\r\n                xmls.serializeToString(svg)\r\n            ], {\r\n                type: \"image/svg+xml\"\r\n            });\r\n            reader.readAsDataURL(blob);\r\n            reader.onloadend = function () {\r\n                callback(reader.result);\r\n            };\r\n        });\r\n    };\r\n    /**\r\n     * If there are images in the map convert their href in dataURI.\r\n     * @param {HTMLElement} element\r\n     * @param {Function} callback\r\n     */\r\n    Export.prototype.convertImages = function (element, callback) {\r\n        var images = element.querySelectorAll(\"image\"), counter = images.length;\r\n        if (counter > 0) {\r\n            var _loop_1 = function (image) {\r\n                var canvas = document.createElement(\"canvas\"), ctx = canvas.getContext(\"2d\"), img = new Image(), href = image.getAttribute(\"href\");\r\n                img.crossOrigin = \"Anonymous\";\r\n                img.src = href;\r\n                img.onload = function () {\r\n                    canvas.width = img.width;\r\n                    canvas.height = img.height;\r\n                    ctx.drawImage(img, 0, 0);\r\n                    image.setAttribute(\"href\", canvas.toDataURL(\"image/png\"));\r\n                    counter--;\r\n                    if (counter === 0) {\r\n                        callback();\r\n                    }\r\n                };\r\n                img.onerror = function () {\r\n                    counter--;\r\n                    if (counter === 0) {\r\n                        callback();\r\n                    }\r\n                };\r\n            };\r\n            for (var _i = 0, _a = images; _i < _a.length; _i++) {\r\n                var image = _a[_i];\r\n                _loop_1(image);\r\n            }\r\n        }\r\n        else {\r\n            callback();\r\n        }\r\n    };\r\n    return Export;\r\n}());\r\nexport default Export;\r\n"}
