{"code":"import Node from \"../models/node\";\r\nimport { Event } from \"./events\";\r\nimport Log from \"../../utils/log\";\r\nimport Utils from \"../../utils/utils\";\r\n/**\r\n * Manage map history, for each change save a snapshot.\r\n */\r\nvar History = /** @class */ (function () {\r\n    /**\r\n     * Get the associated map instance, initialize index and snapshots.\r\n     * @param {Map} map\r\n     */\r\n    function History(map) {\r\n        var _this = this;\r\n        /**\r\n         * Return last snapshot of the current map.\r\n         * @return {MapSnapshot} [snapshot] - Last snapshot of the map.\r\n         */\r\n        this.current = function () {\r\n            return _this.snapshots[_this.index];\r\n        };\r\n        /**\r\n         * Replace old map with a new one or create a new empty map.\r\n         * @param {MapSnapshot} snapshot\r\n         */\r\n        this.new = function (snapshot) {\r\n            if (snapshot === undefined) {\r\n                var oldRootCoordinates = Utils.cloneObject(_this.map.nodes.getRoot().coordinates);\r\n                _this.map.nodes.setCounter(0);\r\n                _this.map.nodes.clear();\r\n                _this.map.draw.clear();\r\n                _this.map.draw.update();\r\n                _this.map.nodes.addRootNode(oldRootCoordinates);\r\n                _this.map.zoom.center(null, 0);\r\n                _this.save();\r\n                _this.map.events.call(Event.create);\r\n            }\r\n            else if (_this.checkSnapshotStructure(snapshot)) {\r\n                _this.redraw(snapshot);\r\n                _this.map.zoom.center(\"position\", 0);\r\n                _this.save();\r\n                _this.map.events.call(Event.create);\r\n            }\r\n            else {\r\n                Log.error(\"The snapshot is not correct\");\r\n            }\r\n        };\r\n        /**\r\n         * Undo last changes.\r\n         */\r\n        this.undo = function () {\r\n            if (_this.index > 0) {\r\n                _this.redraw(_this.snapshots[--_this.index]);\r\n                _this.map.events.call(Event.undo);\r\n            }\r\n        };\r\n        /**\r\n         * Redo one change which was undone.\r\n         */\r\n        this.redo = function () {\r\n            if (_this.index < _this.snapshots.length - 1) {\r\n                _this.redraw(_this.snapshots[++_this.index]);\r\n                _this.map.events.call(Event.redo);\r\n            }\r\n        };\r\n        /**\r\n         * Return all history of map with all snapshots.\r\n         * @returns {MapSnapshot[]}\r\n         */\r\n        this.getHistory = function () {\r\n            return {\r\n                snapshots: _this.snapshots.slice(0),\r\n                index: _this.index\r\n            };\r\n        };\r\n        this.map = map;\r\n        this.index = -1;\r\n        this.snapshots = [];\r\n    }\r\n    /**\r\n     * Save the current snapshot of the mind map.\r\n     */\r\n    History.prototype.save = function () {\r\n        if (this.index < this.snapshots.length - 1) {\r\n            this.snapshots.splice(this.index + 1);\r\n        }\r\n        this.snapshots.push(this.getSnapshot());\r\n        this.index++;\r\n    };\r\n    /**\r\n     * Redraw the map with a new snapshot.\r\n     * @param {MapSnapshot} snapshot\r\n     */\r\n    History.prototype.redraw = function (snapshot) {\r\n        var _this = this;\r\n        this.map.nodes.clear();\r\n        snapshot.forEach(function (property) {\r\n            var properties = {\r\n                id: _this.sanitizeNodeId(property.id),\r\n                parent: _this.map.nodes.getNode(_this.sanitizeNodeId(property.parent)),\r\n                k: property.k,\r\n                name: property.name,\r\n                coordinates: Utils.cloneObject(property.coordinates),\r\n                image: Utils.cloneObject(property.image),\r\n                colors: Utils.cloneObject(property.colors),\r\n                font: Utils.cloneObject(property.font),\r\n                locked: property.locked\r\n            };\r\n            var node = new Node(properties);\r\n            _this.map.nodes.setNode(node.id, node);\r\n        });\r\n        this.map.draw.clear();\r\n        this.map.draw.update();\r\n        this.map.nodes.selectRootNode();\r\n        this.setCounter();\r\n    };\r\n    /**\r\n     * Return a copy of all fundamental node properties.\r\n     * @return {MapSnapshot} properties\r\n     */\r\n    History.prototype.getSnapshot = function () {\r\n        var _this = this;\r\n        return this.map.nodes.getNodes().map(function (node) {\r\n            return _this.map.nodes.getNodeProperties(node, false);\r\n        }).slice();\r\n    };\r\n    /**\r\n     * Set the right counter value of the nodes.\r\n     */\r\n    History.prototype.setCounter = function () {\r\n        var id = this.map.nodes.getNodes().map(function (node) {\r\n            var words = node.id.split(\"_\");\r\n            return parseInt(words[words.length - 1]);\r\n        });\r\n        this.map.nodes.setCounter(Math.max.apply(Math, id) + 1);\r\n    };\r\n    /**\r\n     * Sanitize an old map node id with a new.\r\n     * @param {string} oldId\r\n     * @returns {string} newId\r\n     */\r\n    History.prototype.sanitizeNodeId = function (oldId) {\r\n        if (typeof oldId === \"string\") {\r\n            var words = oldId.split(\"_\");\r\n            return this.map.id + \"_\" + words[words.length - 2] + \"_\" + words[words.length - 1];\r\n        }\r\n    };\r\n    /**\r\n     * Check the snapshot structure and return true if it is authentic.\r\n     * @param {MapSnapshot} snapshot\r\n     * @return {boolean} result\r\n     */\r\n    History.prototype.checkSnapshotStructure = function (snapshot) {\r\n        if (!Array.isArray(snapshot)) {\r\n            return false;\r\n        }\r\n        if ((snapshot[0].key && snapshot[0].value)) {\r\n            this.convertOldMmp(snapshot);\r\n        }\r\n        for (var _i = 0, snapshot_1 = snapshot; _i < snapshot_1.length; _i++) {\r\n            var node = snapshot_1[_i];\r\n            if (!this.checkNodeProperties(node)) {\r\n                return false;\r\n            }\r\n        }\r\n        this.translateNodePositions(snapshot);\r\n        return true;\r\n    };\r\n    /**\r\n     * Check the snapshot node properties and return true if they are authentic.\r\n     * @param {ExportNodeProperties} node\r\n     * @return {boolean} result\r\n     */\r\n    History.prototype.checkNodeProperties = function (node) {\r\n        var conditions = [\r\n            typeof node.id === \"string\",\r\n            typeof node.parent === \"string\",\r\n            typeof node.k === \"number\",\r\n            typeof node.name === \"string\",\r\n            typeof node.locked === \"boolean\",\r\n            node.coordinates\r\n                && typeof node.coordinates.x === \"number\"\r\n                && typeof node.coordinates.y === \"number\",\r\n            node.image\r\n                && typeof node.image.size === \"number\"\r\n                && typeof node.image.src === \"string\",\r\n            node.colors\r\n                && typeof node.colors.background === \"string\"\r\n                && typeof node.colors.branch === \"string\"\r\n                && typeof node.colors.name === \"string\",\r\n            node.font\r\n                && typeof node.font.size === \"number\"\r\n                && typeof node.font.weight === \"string\"\r\n                && typeof node.font.style === \"string\"\r\n        ];\r\n        return conditions.every(function (condition) { return condition; });\r\n    };\r\n    /**\r\n     * Convert the old mmp (version: 0.1.7) snapshot to new.\r\n     * @param {Array} snapshot\r\n     */\r\n    History.prototype.convertOldMmp = function (snapshot) {\r\n        for (var _i = 0, snapshot_2 = snapshot; _i < snapshot_2.length; _i++) {\r\n            var node = snapshot_2[_i];\r\n            var oldNode = Utils.cloneObject(node);\r\n            Utils.clearObject(node);\r\n            node.id = \"map_node_\" + oldNode.key.substr(4);\r\n            node.parent = oldNode.value.parent ? \"map_node_\" + oldNode.value.parent.substr(4) : \"\";\r\n            node.k = oldNode.value.k;\r\n            node.name = oldNode.value.name;\r\n            node.locked = oldNode.value.fixed;\r\n            node.coordinates = {\r\n                x: oldNode.value.x,\r\n                y: oldNode.value.y\r\n            };\r\n            node.image = {\r\n                size: parseInt(oldNode.value[\"image-size\"]),\r\n                src: oldNode.value[\"image-src\"]\r\n            };\r\n            node.colors = {\r\n                background: oldNode.value[\"background-color\"],\r\n                branch: oldNode.value[\"branch-color\"] || \"\",\r\n                name: oldNode.value[\"text-color\"]\r\n            };\r\n            node.font = {\r\n                size: parseInt(oldNode.value[\"font-size\"]),\r\n                weight: oldNode.value.bold ? \"bold\" : \"normal\",\r\n                style: oldNode.value.italic ? \"italic\" : \"normal\"\r\n            };\r\n        }\r\n    };\r\n    /**\r\n     * Adapt the coordinates to the old map.\r\n     * @param {MapSnapshot} snapshot\r\n     */\r\n    History.prototype.translateNodePositions = function (snapshot) {\r\n        var oldRootNode = this.map.nodes.getRoot(), newRootNode = snapshot.find(function (node) {\r\n            var words = node.id.split(\"_\");\r\n            return words[words.length - 1] === \"0\";\r\n        }), dx = newRootNode.coordinates.x - oldRootNode.coordinates.x, dy = newRootNode.coordinates.y - oldRootNode.coordinates.y;\r\n        for (var _i = 0, snapshot_3 = snapshot; _i < snapshot_3.length; _i++) {\r\n            var node = snapshot_3[_i];\r\n            node.coordinates.x -= dx;\r\n            node.coordinates.y -= dy;\r\n        }\r\n    };\r\n    return History;\r\n}());\r\nexport default History;\r\n"}
