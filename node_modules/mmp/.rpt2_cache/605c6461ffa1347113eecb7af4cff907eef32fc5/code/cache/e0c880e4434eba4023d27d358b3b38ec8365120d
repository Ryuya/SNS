{"code":"import * as d3 from \"d3\";\r\nimport Events from \"./handlers/events\";\r\nimport Zoom from \"./handlers/zoom\";\r\nimport Draw from \"./handlers/draw\";\r\nimport Options from \"./options\";\r\nimport History from \"./handlers/history\";\r\nimport Drag from \"./handlers/drag\";\r\nimport Nodes from \"./handlers/nodes\";\r\nimport Export from \"./handlers/export\";\r\nimport CopyPaste from \"./handlers/copy-paste\";\r\n/**\r\n * Initialize all handlers and return a mmp object.\r\n */\r\nvar Map = /** @class */ (function () {\r\n    /**\r\n     * Create all handler instances, set some map behaviors and return a mmp instance.\r\n     * @param {string} id\r\n     * @param {OptionParameters} options\r\n     * @returns {MmpInstance} mmpInstance\r\n     */\r\n    function Map(id, options) {\r\n        var _this = this;\r\n        /**\r\n         * Remove permanently mmp instance.\r\n         */\r\n        this.remove = function () {\r\n            _this.dom.svg.remove();\r\n            var props = Object.keys(_this.instance);\r\n            for (var i = 0; i < props.length; i++) {\r\n                delete _this.instance[props[i]];\r\n            }\r\n        };\r\n        this.id = id;\r\n        this.dom = {};\r\n        this.events = new Events();\r\n        this.options = new Options(options, this);\r\n        this.zoom = new Zoom(this);\r\n        this.history = new History(this);\r\n        this.drag = new Drag(this);\r\n        this.draw = new Draw(this);\r\n        this.nodes = new Nodes(this);\r\n        this.export = new Export(this);\r\n        this.copyPaste = new CopyPaste(this);\r\n        this.draw.create();\r\n        if (this.options.centerOnResize === true) {\r\n            d3.select(window).on(\"resize.\" + this.id, function () {\r\n                _this.zoom.center();\r\n            });\r\n        }\r\n        if (this.options.zoom === true) {\r\n            this.dom.svg.call(this.zoom.getZoomBehavior());\r\n        }\r\n        this.nodes.addRootNode();\r\n        this.history.save();\r\n        return this.createMmpInstance();\r\n    }\r\n    /**\r\n     * Return a mmp instance with all mmp library functions.\r\n     * @return {MmpInstance} mmpInstance\r\n     */\r\n    Map.prototype.createMmpInstance = function () {\r\n        return this.instance = {\r\n            on: this.events.on,\r\n            remove: this.remove,\r\n            new: this.history.new,\r\n            updateOptions: this.options.update,\r\n            exportAsJSON: this.export.asJSON,\r\n            exportAsImage: this.export.asImage,\r\n            history: this.history.getHistory,\r\n            undo: this.history.undo,\r\n            redo: this.history.redo,\r\n            zoomIn: this.zoom.zoomIn,\r\n            zoomOut: this.zoom.zoomOut,\r\n            center: this.zoom.center,\r\n            addNode: this.nodes.addNode,\r\n            selectNode: this.nodes.selectNode,\r\n            editNode: this.nodes.editNode,\r\n            deselectNode: this.nodes.deselectNode,\r\n            nodeChildren: this.nodes.nodeChildren,\r\n            updateNode: this.nodes.updateNode,\r\n            removeNode: this.nodes.removeNode,\r\n            copyNode: this.copyPaste.copy,\r\n            cutNode: this.copyPaste.cut,\r\n            pasteNode: this.copyPaste.paste\r\n        };\r\n    };\r\n    return Map;\r\n}());\r\nexport default Map;\r\n"}
